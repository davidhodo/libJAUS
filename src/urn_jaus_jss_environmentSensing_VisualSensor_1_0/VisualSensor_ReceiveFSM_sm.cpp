/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : VisualSensor_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_environmentSensing_VisualSensor_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_environmentSensing_VisualSensor_1_0/VisualSensor_ReceiveFSM.h"
#include "include/urn_jaus_jss_environmentSensing_VisualSensor_1_0/VisualSensor_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_environmentSensing_VisualSensor_1_0
{
    // Static class declarations.
    VisualSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled("VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled", 0);
    VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled("VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled", 1);
    VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void VisualSensor_ReceiveFSMState::BroadcastGlobalTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::BroadcastLocalTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::CancelEventTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::CreateEventTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::EventErrorTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::EventOccurredTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::InternalStateChange_To_VisualSensor_ReceiveFSM_ReceivingTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_ReadyTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryAuthorityTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryControlTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryEventsTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QuerySensorGeometricPropertiesTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryTimeoutTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryVisualSensorCapabilitiesTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::QueryVisualSensorConfigurationTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReceiveTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, SetVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::ReleaseControlTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::RequestControlTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::SendTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::SetAuthorityTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::SetVisualSensorConfigurationTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::TimeoutTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::UpdateEventTransition(VisualSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void VisualSensor_ReceiveFSMState::Default(VisualSensor_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled);
        }
        catch (...)
        {
            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSensorGeometricProperties", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportVisualSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportVisualSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_ReceivingTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_ReadyTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(VisualSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_VisualSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(VisualSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSensorGeometricProperties", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportVisualSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryVisualSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        VisualSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportVisualSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(VisualSensor_ReceiveFSMContext& context, SetVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        VisualSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            VisualSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmSensorConfiguration", transportData);
                ctxt.updateVisualSensorConfigurationAction();
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetVisualSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             VisualSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void VisualSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(VisualSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VisualSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
