/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : LocalVectorDriver_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_mobility_LocalVectorDriver_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_mobility_LocalVectorDriver_1_0/LocalVectorDriver_ReceiveFSM.h"
#include "include/urn_jaus_jss_mobility_LocalVectorDriver_1_0/LocalVectorDriver_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_mobility_LocalVectorDriver_1_0
{
    // Static class declarations.
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby", 0);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init", 1);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure", 2);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown", 3);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency", 4);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby", 5);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready", 6);
    LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency("LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency", 7);
    LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 8);

    void LocalVectorDriver_ReceiveFSMState::BroadcastGlobalTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::BroadcastLocalTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::CancelEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ClearEmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::CreateEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::EventErrorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::EventOccurredTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::FailureTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InitializedTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryAuthorityTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryEventsTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryLocalVectorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryStatusTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::QueryTimeoutTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, SetLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ReleaseControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::RequestControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ResetTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ResumeTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::SendTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::SetAuthorityTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::SetEmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::SetLocalVectorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::TimeoutTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::UpdateEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalVectorDriver_ReceiveFSMState::Default(LocalVectorDriver_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, SetLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            LocalVectorDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.setLocalVectorAction();
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetLocalVector msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalVectorDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalVectorDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context, QueryLocalVector msg, Receive::Body::ReceiveRec transportData)
    {
        LocalVectorDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        LocalVectorDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportLocalVector", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryLocalVector msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::FailureTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::InitializedTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryLocalVectorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalVectorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalVectorTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStatusTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResetTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResumeTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetLocalVectorTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetLocalVectorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetLocalVectorTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ShutdownTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::StandbyTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void LocalVectorDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(LocalVectorDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalVectorDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
