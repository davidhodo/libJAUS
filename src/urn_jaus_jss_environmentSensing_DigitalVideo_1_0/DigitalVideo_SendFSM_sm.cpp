/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : DigitalVideo_SendFSM_sm.sm
 */

#include "urn_jaus_jss_environmentSensing_DigitalVideo_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_environmentSensing_DigitalVideo_1_0/DigitalVideo_SendFSM.h"
#include "include/urn_jaus_jss_environmentSensing_DigitalVideo_1_0/DigitalVideo_SendFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_environmentSensing_DigitalVideo_1_0
{
    // Static class declarations.
    DigitalVideo_SendFSM_SM_Sending DigitalVideo_SendFSM_SM::Sending("DigitalVideo_SendFSM_SM::Sending", 0);
    DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE("DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void DigitalVideo_SendFSMState::BroadcastGlobalTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::BroadcastLocalTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::CancelEventTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::ControlDigitalVideoSensorStreamTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::CreateEventTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::EventErrorTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::EventOccurredTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryAuthorityTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryControlTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryDigitalVideoSensorCapabilitiesTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryDigitalVideoSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryEventsTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QuerySensorGeometricPropertiesTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryTimeoutTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryVisualSensorCapabilitiesTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::QueryVisualSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::ReceiveTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::ReleaseControlTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::RequestControlTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::SendTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::SetAuthorityTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::SetDigitalVideoSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::SetVisualSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::TimeoutTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::UpdateEventTransition(DigitalVideo_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void DigitalVideo_SendFSMState::Default(DigitalVideo_SendFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ControlDigitalVideoSensorStreamTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ControlDigitalVideoSensorStreamTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ControlDigitalVideoSensorStreamTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorCapabilitiesTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryDigitalVideoSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SetDigitalVideoSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetDigitalVideoSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetDigitalVideoSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SetVisualSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void DigitalVideo_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(DigitalVideo_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : DigitalVideo_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
