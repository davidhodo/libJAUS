/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : LocalWaypointListDriver_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_mobility_LocalWaypointListDriver_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_mobility_LocalWaypointListDriver_1_0/LocalWaypointListDriver_ReceiveFSM.h"
#include "include/urn_jaus_jss_mobility_LocalWaypointListDriver_1_0/LocalWaypointListDriver_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_mobility_LocalWaypointListDriver_1_0
{
    // Static class declarations.
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby", 0);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init", 1);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure", 2);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown", 3);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency", 4);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby", 5);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready", 6);
    LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency("LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency", 7);
    LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 8);

    void LocalWaypointListDriver_ReceiveFSMState::BroadcastGlobalTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::BroadcastLocalTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::CancelEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ClearEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::CreateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::DeleteElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::EventErrorTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::EventOccurredTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ExecuteListTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InitializedTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryActiveElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryElementCountTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryElementListTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryEventsTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryLocalWaypointTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryStatusTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryTimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::QueryTravelSpeedTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, ExecuteList msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ReleaseControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::RequestControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ResetTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ResumeTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::SendTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::SetAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::SetElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::SetEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::TimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::UpdateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void LocalWaypointListDriver_ReceiveFSMState::Default(LocalWaypointListDriver_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ) && ctxt.isValidElementRequest( msg ) && ctxt.isElementSupported( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.setElementAction(msg);
                ctxt.SendAction("ConfirmElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isValidElementRequest( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isElementSupported( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.resetTravelSpeedAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, ExecuteList msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ) && ctxt.elementExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(ExecuteList msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.executeWaypointListAction(msg);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(ExecuteList msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.elementSpecified( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(ExecuteList msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.modifyTravelSpeedAction(msg);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(ExecuteList msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ) && ctxt.isValidElementRequest( msg ) && ctxt.isElementSupported( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.setElementAction(msg);
                ctxt.SendAction("ConfirmElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isValidElementRequest( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isElementSupported( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportActiveElement", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (ctxt.waypointExists( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportLocalWaypoint", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTravelSpeed", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData)
    {
        LocalWaypointListDriver_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ) && ctxt.isValidElementRequest( msg ) && ctxt.isElementSupported( msg ))
        {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.setElementAction(msg);
                ctxt.SendAction("ConfirmElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isValidElementRequest( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ! ctxt.isElementSupported( msg ))
    
    {
            LocalWaypointListDriver_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectElementRequest", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             LocalWaypointListDriver_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::DeleteElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::DeleteElementTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::DeleteElementTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ExecuteListTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ExecuteListTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ExecuteListTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::InitializedTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryActiveElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryActiveElementTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryActiveElementTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryElementCountTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementCountTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementCountTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryElementListTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementListTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementListTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryElementTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryLocalWaypointTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStatusTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTravelSpeedTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResetTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResumeTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetElementTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetElementTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : LocalWaypointListDriver_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
