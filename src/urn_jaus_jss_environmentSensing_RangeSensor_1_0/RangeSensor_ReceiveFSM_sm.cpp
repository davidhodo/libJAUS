/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : RangeSensor_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_environmentSensing_RangeSensor_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_environmentSensing_RangeSensor_1_0/RangeSensor_ReceiveFSM.h"
#include "include/urn_jaus_jss_environmentSensing_RangeSensor_1_0/RangeSensor_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_environmentSensing_RangeSensor_1_0
{
    // Static class declarations.
    RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled("RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled", 0);
    RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled("RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled", 1);
    RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void RangeSensor_ReceiveFSMState::BroadcastGlobalTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::BroadcastLocalTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::CancelEventTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::CreateEventTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::EventErrorTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::EventOccurredTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryAuthorityTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryControlTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryEventsTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryRangeSensorCapabilitiesTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryRangeSensorCompressedDataTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryRangeSensorDataTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QuerySensorGeometricPropertiesTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::QueryTimeoutTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::ReleaseControlTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::RequestControlTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::SendTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::SetAuthorityTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::SetRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::TimeoutTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::UpdateEventTransition(RangeSensor_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void RangeSensor_ReceiveFSMState::Default(RangeSensor_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled);
        }
        catch (...)
        {
            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportRangeSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTranformSupported( ))
        {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorCompressedData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTranformSupported( ))
    
    {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorCompressedData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             RangeSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportRangeSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTranformSupported( ))
        {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTranformSupported( ))
    
    {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             RangeSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSensorGeometricProperties", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportRangeSensorCapabilities", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTranformSupported( ))
        {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorCompressedData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTranformSupported( ))
    
    {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorCompressedData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             RangeSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportRangeSensorConfiguration", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isCoordinateTranformSupported( ))
        {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCoordinateTranformSupported( ))
    
    {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ReportRangeSensorData", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             RangeSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        RangeSensor_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportSensorGeometricProperties", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(RangeSensor_ReceiveFSMContext& context, SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
    {
        RangeSensor_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            RangeSensor_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmSensorConfiguration", transportData);
                ctxt.updateRangeSensorConfigurationAction();
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             RangeSensor_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCapabilitiesTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCapabilitiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCapabilitiesTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCompressedDataTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCompressedDataTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorCompressedDataTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryRangeSensorDataTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorDataTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryRangeSensorDataTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QuerySensorGeometricPropertiesTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetRangeSensorConfigurationTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetRangeSensorConfigurationTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(RangeSensor_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : RangeSensor_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
