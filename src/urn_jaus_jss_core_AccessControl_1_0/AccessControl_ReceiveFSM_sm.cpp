/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : AccessControl_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_core_AccessControl_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_core_AccessControl_1_0/AccessControl_ReceiveFSM.h"
#include "include/urn_jaus_jss_core_AccessControl_1_0/AccessControl_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_core_AccessControl_1_0
{
    // Static class declarations.
    AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled("AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled", 0);
    AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled("AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled", 1);
    AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 2);

    void AccessControl_ReceiveFSMState::BroadcastGlobalTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::BroadcastLocalTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::CancelEventTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::CreateEventTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::EventErrorTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::EventOccurredTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::QueryAuthorityTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::QueryControlTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::QueryEventsTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::QueryTimeoutTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryAuthority msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryControl msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryTimeout msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, ReleaseControl msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReceiveTransition(AccessControl_ReceiveFSMContext& context, SetAuthority msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::ReleaseControlTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::RequestControlTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::SendTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::SetAuthorityTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::TimeoutTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::UpdateEventTransition(AccessControl_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void AccessControl_ReceiveFSMState::Default(AccessControl_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled);
        }
        catch (...)
        {
            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryAuthority msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryAuthority msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportAuthority", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryAuthority msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportControl", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryTimeout msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryTimeout msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTimeout", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(QueryTimeout msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, ReleaseControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_NotControlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled"
            << std::endl;
        }

        if (! ctxt.isControlAvailable())
        {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isDefaultAuthorityGreater(msg) && ctxt.isControlAvailable())
    
    {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.StoreAddressAction(transportData);
                ctxt.SetAuthorityAction(msg);
                ctxt.ResetTimerAction();
                ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                ctxt.processNotifications("Receiving_Ready_Controlled");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled);
            }
            catch (...)
            {
                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else if (ctxt.isDefaultAuthorityGreater(msg))
    
    {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmControl", "INSUFFICIENT_AUTHORITY", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }        else
        {
             AccessControl_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(AccessControl_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::InternalStateChange_To_AccessControl_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
        }
        catch (...)
        {
            context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryAuthority msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryAuthority msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportAuthority", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryAuthority msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportControl", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, QueryTimeout msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        AccessControl_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryTimeout msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportTimeout", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(QueryTimeout msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, ReleaseControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (! ctxt.isControlAvailable())
        {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "NOT_AVAILABLE", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isControllingClient( transportData ) && ctxt.isControlAvailable())
    
    {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.initAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            }
            catch (...)
            {
                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
                throw;
            }
            (context.getState()).Entry(context);
        }        else
        {
             AccessControl_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (! ctxt.isControlAvailable())
        {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isCurrentAuthorityLess(msg) && ! ctxt.isControllingClient( transportData ))
    
    {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.StoreAddressAction(transportData);
                ctxt.SetAuthorityAction(msg);
                ctxt.ResetTimerAction();
                ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isCurrentAuthorityLess(msg) && ! ctxt.isControllingClient( transportData ))
    
    {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("ConfirmControl", "INSUFFICIENT_AUTHORITY", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (! ctxt.isDefaultAuthorityGreater(msg) && ctxt.isControllingClient( transportData ))
    
    {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.ResetTimerAction();
                ctxt.SetAuthorityAction(msg);
                ctxt.SendAction("ConfirmControl", "CONTROL_ACCEPTED", transportData);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else if (ctxt.isDefaultAuthorityGreater(msg) && ctxt.isControllingClient(transportData))
    
    {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.initAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            }
            catch (...)
            {
                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
                throw;
            }
            (context.getState()).Entry(context);
        }        else
        {
             AccessControl_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::ReceiveTransition(AccessControl_ReceiveFSMContext& context, SetAuthority msg, Receive::Body::ReceiveRec transportData)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isAuthorityValid(msg) && ctxt.isControllingClient( transportData ) && ctxt.isControlAvailable())
        {
            AccessControl_ReceiveFSMState& endState = context.getState();

            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetAuthority msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SetAuthorityAction(msg);
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::ReceiveTransition(SetAuthority msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(endState);
            }
            catch (...)
            {
                context.setState(endState);
                throw;
            }
        }
        else
        {
             AccessControl_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Receiving_Ready_Controlled::TimeoutTransition(AccessControl_ReceiveFSMContext& context)
    {
        AccessControl_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled"
            << std::endl;
        }

        if (ctxt.isControlAvailable())
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::TimeoutTransition()"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
                ctxt.initAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Receiving_Ready_Controlled::TimeoutTransition()"
                        << std::endl;
                }

                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
            }
            catch (...)
            {
                context.setState(AccessControl_ReceiveFSM_SM::Receiving_Ready_NotControlled);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             AccessControl_ReceiveFSM_SM_Default::TimeoutTransition(context);
        }

        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void AccessControl_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(AccessControl_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : AccessControl_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
