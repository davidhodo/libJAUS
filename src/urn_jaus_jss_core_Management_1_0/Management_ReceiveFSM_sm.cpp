/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Management_ReceiveFSM_sm.sm
 */

#include "urn_jaus_jss_core_Management_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_core_Management_1_0/Management_ReceiveFSM.h"
#include "include/urn_jaus_jss_core_Management_1_0/Management_ReceiveFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_core_Management_1_0
{
    // Static class declarations.
    Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby("Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby", 0);
    Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init("Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init", 1);
    Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure("Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure", 2);
    Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown("Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown", 3);
    Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency("Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency", 4);
    Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby("Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby", 5);
    Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready("Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready", 6);
    Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency("Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency", 7);
    Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE("Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE", 8);

    void Management_ReceiveFSMState::BroadcastGlobalTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::BroadcastLocalTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::CancelEventTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ClearEmergencyTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::CreateEventTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::EventErrorTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::EventOccurredTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InitializedTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::QueryAuthorityTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::QueryControlTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::QueryEventsTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::QueryStatusTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::QueryTimeoutTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, SetAuthority msg)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, ClearEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, ReleaseControl msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Resume msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReceiveTransition(Management_ReceiveFSMContext& context, Standby msg, Receive::Body::ReceiveRec transportData)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ReleaseControlTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::RequestControlTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ResetTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ResumeTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::SendTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::SetAuthorityTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::SetEmergencyTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::ShutdownTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::StandbyTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::TimeoutTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::UpdateEventTransition(Management_ReceiveFSMContext& context)
    {
        Default(context);
        return;
    }

    void Management_ReceiveFSMState::Default(Management_ReceiveFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InitializedTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InitializedTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InitializedTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::FailureTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Reset msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Reset msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, SetAuthority msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SetAuthority msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SetAuthority msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Shutdown msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Shutdown msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, ClearEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (ctxt.isIDStored( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(ClearEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.popWrapper_0f9fae233502305d99c64a59f0f80a4e(msg, transportData);
                ctxt.processNotifications(context.peakTopStateStack());
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(ClearEmergency msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.popState();
            }
            catch (...)
            {
                context.popState();
                throw;
            }
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency::TimeoutTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.initializeAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, Resume msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Resume msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Resume msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::FailureTransition(Management_ReceiveFSMContext& context)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::FailureTransition()"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("RejectControl", "CONTROL_RELEASED");
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::FailureTransition()"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.initializeAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Management_ReceiveFSMContext& context, Standby msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Standby msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready::ReceiveTransition(Standby msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::FailureTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Ready", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Ready);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Emergency", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Failure", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Failure);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.initializeAction();
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(Management_ReceiveFSMContext& context, JTS::InternalEvent* ie)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        (context.getState()).Exit(context);
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Standby", ie);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::InternalStateChange_To_Management_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)"
                    << std::endl;
            }

            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
        }
        catch (...)
        {
            context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Standby);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Reset msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Reset msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, SetAuthority msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetAuthority msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetAuthority msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Shutdown msg)"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Shutdown msg)"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, ClearEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (ctxt.isIDStored( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(ClearEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.popWrapper_baf5fee6be943f3c815a84f544a0981e(msg, transportData);
                ctxt.processNotifications(context.peakTopStateStack());
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(ClearEmergency msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.popState();
            }
            catch (...)
            {
                context.popState();
                throw;
            }
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, QueryStatus msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ReportStatus", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(QueryStatus msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, ReleaseControl msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("RejectControl", "NOT_AVAILABLE", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(ReleaseControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, RequestControl msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.SendAction("ConfirmControl", "NOT_AVAILABLE", transportData);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(RequestControl msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Reset msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.initializeAction();
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Init");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Reset msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, SetEmergency msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        Management_ReceiveFSMState& endState = context.getState();

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                << std::endl;
        }

        context.clearState();
        try
        {
            ctxt.StoreIDAction(transportData);
            ctxt.processNotifications("Receiving_Ready_Controlled_StateB_Emergency");
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(SetEmergency msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
        }
        catch (...)
        {
            context.setState(endState);
            context.pushState(Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency);
            throw;
        }
        (context.getState()).Entry(context);

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Management_ReceiveFSMContext& context, Shutdown msg, Receive::Body::ReceiveRec transportData)
    {
        Management_ReceiveFSM& ctxt(context.getOwner());

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (ctxt.isControllingClient( transportData ))
        {
            (context.getState()).Exit(context);
            if (context.getDebugFlag() == true)
            {
                std::ostream& str = context.getDebugStream();

                str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                    << std::endl;
            }

            context.clearState();
            try
            {
                ctxt.SendAction("RejectControl", "CONTROL_RELEASED", transportData);
                ctxt.processNotifications("Receiving_Ready_NotControlled_StateA_Shutdown");
                if (context.getDebugFlag() == true)
                {
                    std::ostream& str = context.getDebugStream();

                    str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::ReceiveTransition(Shutdown msg, Receive::Body::ReceiveRec transportData)"
                        << std::endl;
                }

                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
            }
            catch (...)
            {
                context.setState(Management_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Shutdown);
                throw;
            }
            (context.getState()).Entry(context);
        }
        else
        {
             Management_ReceiveFSM_SM_Default::ReceiveTransition(context, msg, transportData);
        }

        return;
    }

    void Management_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency::TimeoutTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Receiving_Ready_Controlled_StateB_Emergency::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ClearEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::FailureTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::FailureTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::InitializedTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::InitializedTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryControlTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryControlTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryStatusTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryStatusTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryTimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ReleaseControlTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::RequestControlTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::RequestControlTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResetTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResetTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ResumeTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ResumeTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetAuthorityTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::SetEmergencyTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::ShutdownTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::ShutdownTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::StandbyTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::StandbyTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::TimeoutTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::TimeoutTransition()"
                << std::endl;
        }


        return;
    }

    void Management_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(Management_ReceiveFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : Management_ReceiveFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
