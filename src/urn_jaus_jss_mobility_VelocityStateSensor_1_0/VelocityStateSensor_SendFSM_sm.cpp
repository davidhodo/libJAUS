/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : VelocityStateSensor_SendFSM_sm.sm
 */

#include "urn_jaus_jss_mobility_VelocityStateSensor_1_0/Messages/MessageSet.h"
#include "urn_jaus_jss_mobility_VelocityStateSensor_1_0/VelocityStateSensor_SendFSM.h"
#include "include/urn_jaus_jss_mobility_VelocityStateSensor_1_0/VelocityStateSensor_SendFSM_sm.h"

using namespace statemap;

namespace urn_jaus_jss_mobility_VelocityStateSensor_1_0
{
    // Static class declarations.
    VelocityStateSensor_SendFSM_SM_Sending VelocityStateSensor_SendFSM_SM::Sending("VelocityStateSensor_SendFSM_SM::Sending", 0);
    VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE("VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE", 1);

    void VelocityStateSensor_SendFSMState::BroadcastGlobalTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::BroadcastLocalTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::CancelEventTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::CreateEventTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::EventErrorTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::EventOccurredTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::QueryEventsTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::QueryVelocityStateTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::ReceiveTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::SendTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::UpdateEventTransition(VelocityStateSensor_SendFSMContext& context)
    {
        Default(context);
        return;
    }

    void VelocityStateSensor_SendFSMState::Default(VelocityStateSensor_SendFSMContext& context)
    {
        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "TRANSITION   : Default"
                << std::endl;
        }

        throw (
            TransitionUndefinedException(
                context.getState().getName(),
                context.getTransition()));

        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastGlobalTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::BroadcastLocalTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CancelEventTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CancelEventTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::CreateEventTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::CreateEventTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventErrorTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventErrorTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::EventOccurredTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::EventOccurredTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryEventsTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryEventsTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::QueryVelocityStateTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVelocityStateTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::QueryVelocityStateTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::ReceiveTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::ReceiveTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::SendTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::SendTransition()"
                << std::endl;
        }


        return;
    }

    void VelocityStateSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE::UpdateEventTransition(VelocityStateSensor_SendFSMContext& context)
    {

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "LEAVING STATE   : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE"
            << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "ENTER TRANSITION: VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }

        if (context.getDebugFlag() == true)
        {
            std::ostream& str = context.getDebugStream();

            str << "EXIT TRANSITION : VelocityStateSensor_SendFSM_SM::Internally_Generated_State_DO_NOT_USE::UpdateEventTransition()"
                << std::endl;
        }


        return;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
