#ifndef _H_RANGESENSOR_SENDFSM_SM
#define _H_RANGESENSOR_SENDFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : RangeSensor_SendFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_environmentSensing_RangeSensor_1_0
{
    // Forward declarations.
    class RangeSensor_SendFSM_SM;
    class RangeSensor_SendFSM_SM_Sending;
    class RangeSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class RangeSensor_SendFSM_SM_Default;
    class RangeSensor_SendFSMState;
    class RangeSensor_SendFSMContext;
    class RangeSensor_SendFSM;

    class RangeSensor_SendFSMState :
        public statemap::State
    {
    public:

        RangeSensor_SendFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(RangeSensor_SendFSMContext&) {};
        virtual void Exit(RangeSensor_SendFSMContext&) {};

        virtual void BroadcastGlobalTransition(RangeSensor_SendFSMContext& context);
        virtual void BroadcastLocalTransition(RangeSensor_SendFSMContext& context);
        virtual void CancelEventTransition(RangeSensor_SendFSMContext& context);
        virtual void CreateEventTransition(RangeSensor_SendFSMContext& context);
        virtual void EventErrorTransition(RangeSensor_SendFSMContext& context);
        virtual void EventOccurredTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryAuthorityTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryControlTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryEventsTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryRangeSensorCapabilitiesTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryRangeSensorCompressedDataTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryRangeSensorConfigurationTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryRangeSensorDataTransition(RangeSensor_SendFSMContext& context);
        virtual void QuerySensorGeometricPropertiesTransition(RangeSensor_SendFSMContext& context);
        virtual void QueryTimeoutTransition(RangeSensor_SendFSMContext& context);
        virtual void ReceiveTransition(RangeSensor_SendFSMContext& context);
        virtual void ReleaseControlTransition(RangeSensor_SendFSMContext& context);
        virtual void RequestControlTransition(RangeSensor_SendFSMContext& context);
        virtual void SendTransition(RangeSensor_SendFSMContext& context);
        virtual void SetAuthorityTransition(RangeSensor_SendFSMContext& context);
        virtual void SetRangeSensorConfigurationTransition(RangeSensor_SendFSMContext& context);
        virtual void TimeoutTransition(RangeSensor_SendFSMContext& context);
        virtual void UpdateEventTransition(RangeSensor_SendFSMContext& context);

    protected:

        virtual void Default(RangeSensor_SendFSMContext& context);
    };

    class RangeSensor_SendFSM_SM
    {
    public:

        static RangeSensor_SendFSM_SM_Sending Sending;
        static RangeSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class RangeSensor_SendFSM_SM_Default :
        public RangeSensor_SendFSMState
    {
    public:

        RangeSensor_SendFSM_SM_Default(const char *name, int stateId)
        : RangeSensor_SendFSMState(name, stateId)
        {};

    };

    class RangeSensor_SendFSM_SM_Sending :
        public RangeSensor_SendFSM_SM_Default
    {
    public:
        RangeSensor_SendFSM_SM_Sending(const char *name, int stateId)
        : RangeSensor_SendFSM_SM_Default(name, stateId)
        {};

    };

    class RangeSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public RangeSensor_SendFSM_SM_Default
    {
    public:
        RangeSensor_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : RangeSensor_SendFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(RangeSensor_SendFSMContext& context);
        void BroadcastLocalTransition(RangeSensor_SendFSMContext& context);
        void CancelEventTransition(RangeSensor_SendFSMContext& context);
        void CreateEventTransition(RangeSensor_SendFSMContext& context);
        void EventErrorTransition(RangeSensor_SendFSMContext& context);
        void EventOccurredTransition(RangeSensor_SendFSMContext& context);
        void QueryAuthorityTransition(RangeSensor_SendFSMContext& context);
        void QueryControlTransition(RangeSensor_SendFSMContext& context);
        void QueryEventsTransition(RangeSensor_SendFSMContext& context);
        void QueryRangeSensorCapabilitiesTransition(RangeSensor_SendFSMContext& context);
        void QueryRangeSensorCompressedDataTransition(RangeSensor_SendFSMContext& context);
        void QueryRangeSensorConfigurationTransition(RangeSensor_SendFSMContext& context);
        void QueryRangeSensorDataTransition(RangeSensor_SendFSMContext& context);
        void QuerySensorGeometricPropertiesTransition(RangeSensor_SendFSMContext& context);
        void QueryTimeoutTransition(RangeSensor_SendFSMContext& context);
        void ReceiveTransition(RangeSensor_SendFSMContext& context);
        void ReleaseControlTransition(RangeSensor_SendFSMContext& context);
        void RequestControlTransition(RangeSensor_SendFSMContext& context);
        void SendTransition(RangeSensor_SendFSMContext& context);
        void SetAuthorityTransition(RangeSensor_SendFSMContext& context);
        void SetRangeSensorConfigurationTransition(RangeSensor_SendFSMContext& context);
        void TimeoutTransition(RangeSensor_SendFSMContext& context);
        void UpdateEventTransition(RangeSensor_SendFSMContext& context);
    };

    class RangeSensor_SendFSMContext :
        public statemap::FSMContext
    {
    public:

        RangeSensor_SendFSMContext(RangeSensor_SendFSM& owner)
        : FSMContext(RangeSensor_SendFSM_SM::Sending),
          _owner(owner)
        {};

        RangeSensor_SendFSMContext(RangeSensor_SendFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        RangeSensor_SendFSM& getOwner() const
        {
            return (_owner);
        };

        RangeSensor_SendFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<RangeSensor_SendFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorCapabilitiesTransition()
        {
            setTransition("QueryRangeSensorCapabilitiesTransition");
            (getState()).QueryRangeSensorCapabilitiesTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorCompressedDataTransition()
        {
            setTransition("QueryRangeSensorCompressedDataTransition");
            (getState()).QueryRangeSensorCompressedDataTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorConfigurationTransition()
        {
            setTransition("QueryRangeSensorConfigurationTransition");
            (getState()).QueryRangeSensorConfigurationTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorDataTransition()
        {
            setTransition("QueryRangeSensorDataTransition");
            (getState()).QueryRangeSensorDataTransition(*this);
            setTransition(NULL);
        };

        void QuerySensorGeometricPropertiesTransition()
        {
            setTransition("QuerySensorGeometricPropertiesTransition");
            (getState()).QuerySensorGeometricPropertiesTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetRangeSensorConfigurationTransition()
        {
            setTransition("SetRangeSensorConfigurationTransition");
            (getState()).SetRangeSensorConfigurationTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        RangeSensor_SendFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_RANGESENSOR_SENDFSM_SM
