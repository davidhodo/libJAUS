#ifndef _H_RANGESENSOR_RECEIVEFSM_SM
#define _H_RANGESENSOR_RECEIVEFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : RangeSensor_ReceiveFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_environmentSensing_RangeSensor_1_0
{
    // Forward declarations.
    class RangeSensor_ReceiveFSM_SM;
    class RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled;
    class RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled;
    class RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class RangeSensor_ReceiveFSM_SM_Default;
    class RangeSensor_ReceiveFSMState;
    class RangeSensor_ReceiveFSMContext;
    class RangeSensor_ReceiveFSM;

    class RangeSensor_ReceiveFSMState :
        public statemap::State
    {
    public:

        RangeSensor_ReceiveFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(RangeSensor_ReceiveFSMContext&) {};
        virtual void Exit(RangeSensor_ReceiveFSMContext&) {};

        virtual void BroadcastGlobalTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void BroadcastLocalTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void CancelEventTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void CreateEventTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void EventErrorTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void EventOccurredTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void QueryAuthorityTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryControlTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryEventsTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryRangeSensorCapabilitiesTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryRangeSensorCompressedDataTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryRangeSensorDataTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QuerySensorGeometricPropertiesTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void QueryTimeoutTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData);
        virtual void ReleaseControlTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void RequestControlTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void SendTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void SetAuthorityTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void SetRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void TimeoutTransition(RangeSensor_ReceiveFSMContext& context);
        virtual void UpdateEventTransition(RangeSensor_ReceiveFSMContext& context);

    protected:

        virtual void Default(RangeSensor_ReceiveFSMContext& context);
    };

    class RangeSensor_ReceiveFSM_SM
    {
    public:

        static RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled Receiving_Ready_NotControlled;
        static RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled Receiving_Ready_Controlled;
        static RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class RangeSensor_ReceiveFSM_SM_Default :
        public RangeSensor_ReceiveFSMState
    {
    public:

        RangeSensor_ReceiveFSM_SM_Default(const char *name, int stateId)
        : RangeSensor_ReceiveFSMState(name, stateId)
        {};

    };

    class RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled :
        public RangeSensor_ReceiveFSM_SM_Default
    {
    public:
        RangeSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled(const char *name, int stateId)
        : RangeSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData);
    };

    class RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled :
        public RangeSensor_ReceiveFSM_SM_Default
    {
    public:
        RangeSensor_ReceiveFSM_SM_Receiving_Ready_Controlled(const char *name, int stateId)
        : RangeSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(RangeSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context, SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData);
    };

    class RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public RangeSensor_ReceiveFSM_SM_Default
    {
    public:
        RangeSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : RangeSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(RangeSensor_ReceiveFSMContext& context);
        void BroadcastLocalTransition(RangeSensor_ReceiveFSMContext& context);
        void CancelEventTransition(RangeSensor_ReceiveFSMContext& context);
        void CreateEventTransition(RangeSensor_ReceiveFSMContext& context);
        void EventErrorTransition(RangeSensor_ReceiveFSMContext& context);
        void EventOccurredTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryAuthorityTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryControlTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryEventsTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryRangeSensorCapabilitiesTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryRangeSensorCompressedDataTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryRangeSensorDataTransition(RangeSensor_ReceiveFSMContext& context);
        void QuerySensorGeometricPropertiesTransition(RangeSensor_ReceiveFSMContext& context);
        void QueryTimeoutTransition(RangeSensor_ReceiveFSMContext& context);
        void ReceiveTransition(RangeSensor_ReceiveFSMContext& context);
        void ReleaseControlTransition(RangeSensor_ReceiveFSMContext& context);
        void RequestControlTransition(RangeSensor_ReceiveFSMContext& context);
        void SendTransition(RangeSensor_ReceiveFSMContext& context);
        void SetAuthorityTransition(RangeSensor_ReceiveFSMContext& context);
        void SetRangeSensorConfigurationTransition(RangeSensor_ReceiveFSMContext& context);
        void TimeoutTransition(RangeSensor_ReceiveFSMContext& context);
        void UpdateEventTransition(RangeSensor_ReceiveFSMContext& context);
    };

    class RangeSensor_ReceiveFSMContext :
        public statemap::FSMContext
    {
    public:

        RangeSensor_ReceiveFSMContext(RangeSensor_ReceiveFSM& owner)
        : FSMContext(RangeSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled),
          _owner(owner)
        {};

        RangeSensor_ReceiveFSMContext(RangeSensor_ReceiveFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        RangeSensor_ReceiveFSM& getOwner() const
        {
            return (_owner);
        };

        RangeSensor_ReceiveFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<RangeSensor_ReceiveFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition");
            (getState()).InternalStateChange_To_RangeSensor_ReceiveFSM_ReceivingTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition");
            (getState()).InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_ReadyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition");
            (getState()).InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition");
            (getState()).InternalStateChange_To_RangeSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorCapabilitiesTransition()
        {
            setTransition("QueryRangeSensorCapabilitiesTransition");
            (getState()).QueryRangeSensorCapabilitiesTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorCompressedDataTransition()
        {
            setTransition("QueryRangeSensorCompressedDataTransition");
            (getState()).QueryRangeSensorCompressedDataTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorConfigurationTransition()
        {
            setTransition("QueryRangeSensorConfigurationTransition");
            (getState()).QueryRangeSensorConfigurationTransition(*this);
            setTransition(NULL);
        };

        void QueryRangeSensorDataTransition()
        {
            setTransition("QueryRangeSensorDataTransition");
            (getState()).QueryRangeSensorDataTransition(*this);
            setTransition(NULL);
        };

        void QuerySensorGeometricPropertiesTransition()
        {
            setTransition("QuerySensorGeometricPropertiesTransition");
            (getState()).QuerySensorGeometricPropertiesTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryRangeSensorCapabilities msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryRangeSensorCompressedData msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryRangeSensorData msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QuerySensorGeometricProperties msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(SetRangeSensorConfiguration msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetRangeSensorConfigurationTransition()
        {
            setTransition("SetRangeSensorConfigurationTransition");
            (getState()).SetRangeSensorConfigurationTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        RangeSensor_ReceiveFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_RANGESENSOR_RECEIVEFSM_SM
