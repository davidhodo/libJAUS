#ifndef _H_GLOBALWAYPOINTLISTDRIVER_SENDFSM_SM
#define _H_GLOBALWAYPOINTLISTDRIVER_SENDFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : GlobalWaypointListDriver_SendFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_GlobalWaypointListDriver_1_0
{
    // Forward declarations.
    class GlobalWaypointListDriver_SendFSM_SM;
    class GlobalWaypointListDriver_SendFSM_SM_Sending;
    class GlobalWaypointListDriver_SendFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class GlobalWaypointListDriver_SendFSM_SM_Default;
    class GlobalWaypointListDriver_SendFSMState;
    class GlobalWaypointListDriver_SendFSMContext;
    class GlobalWaypointListDriver_SendFSM;

    class GlobalWaypointListDriver_SendFSMState :
        public statemap::State
    {
    public:

        GlobalWaypointListDriver_SendFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(GlobalWaypointListDriver_SendFSMContext&) {};
        virtual void Exit(GlobalWaypointListDriver_SendFSMContext&) {};

        virtual void BroadcastGlobalTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void BroadcastLocalTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void CancelEventTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ClearEmergencyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void CreateEventTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void DeleteElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void EventErrorTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void EventOccurredTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ExecuteListTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void FailureTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void InitializedTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryActiveElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryAuthorityTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryElementCountTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryElementListTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryEventsTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryGlobalWaypointTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryStatusTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryTimeoutTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void QueryTravelSpeedTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ReceiveTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ReleaseControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void RequestControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ResetTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ResumeTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void SendTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void SetAuthorityTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void SetElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void SetEmergencyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void ShutdownTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void StandbyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void TimeoutTransition(GlobalWaypointListDriver_SendFSMContext& context);
        virtual void UpdateEventTransition(GlobalWaypointListDriver_SendFSMContext& context);

    protected:

        virtual void Default(GlobalWaypointListDriver_SendFSMContext& context);
    };

    class GlobalWaypointListDriver_SendFSM_SM
    {
    public:

        static GlobalWaypointListDriver_SendFSM_SM_Sending Sending;
        static GlobalWaypointListDriver_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class GlobalWaypointListDriver_SendFSM_SM_Default :
        public GlobalWaypointListDriver_SendFSMState
    {
    public:

        GlobalWaypointListDriver_SendFSM_SM_Default(const char *name, int stateId)
        : GlobalWaypointListDriver_SendFSMState(name, stateId)
        {};

    };

    class GlobalWaypointListDriver_SendFSM_SM_Sending :
        public GlobalWaypointListDriver_SendFSM_SM_Default
    {
    public:
        GlobalWaypointListDriver_SendFSM_SM_Sending(const char *name, int stateId)
        : GlobalWaypointListDriver_SendFSM_SM_Default(name, stateId)
        {};

    };

    class GlobalWaypointListDriver_SendFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public GlobalWaypointListDriver_SendFSM_SM_Default
    {
    public:
        GlobalWaypointListDriver_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : GlobalWaypointListDriver_SendFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void BroadcastLocalTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void CancelEventTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ClearEmergencyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void CreateEventTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void DeleteElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void EventErrorTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void EventOccurredTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ExecuteListTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void FailureTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void InitializedTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryActiveElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryAuthorityTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryElementCountTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryElementListTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryEventsTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryGlobalWaypointTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryStatusTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryTimeoutTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void QueryTravelSpeedTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ReceiveTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ReleaseControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void RequestControlTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ResetTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ResumeTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void SendTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void SetAuthorityTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void SetElementTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void SetEmergencyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void ShutdownTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void StandbyTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void TimeoutTransition(GlobalWaypointListDriver_SendFSMContext& context);
        void UpdateEventTransition(GlobalWaypointListDriver_SendFSMContext& context);
    };

    class GlobalWaypointListDriver_SendFSMContext :
        public statemap::FSMContext
    {
    public:

        GlobalWaypointListDriver_SendFSMContext(GlobalWaypointListDriver_SendFSM& owner)
        : FSMContext(GlobalWaypointListDriver_SendFSM_SM::Sending),
          _owner(owner)
        {};

        GlobalWaypointListDriver_SendFSMContext(GlobalWaypointListDriver_SendFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        GlobalWaypointListDriver_SendFSM& getOwner() const
        {
            return (_owner);
        };

        GlobalWaypointListDriver_SendFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<GlobalWaypointListDriver_SendFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void ClearEmergencyTransition()
        {
            setTransition("ClearEmergencyTransition");
            (getState()).ClearEmergencyTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void DeleteElementTransition()
        {
            setTransition("DeleteElementTransition");
            (getState()).DeleteElementTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void ExecuteListTransition()
        {
            setTransition("ExecuteListTransition");
            (getState()).ExecuteListTransition(*this);
            setTransition(NULL);
        };

        void FailureTransition()
        {
            setTransition("FailureTransition");
            (getState()).FailureTransition(*this);
            setTransition(NULL);
        };

        void InitializedTransition()
        {
            setTransition("InitializedTransition");
            (getState()).InitializedTransition(*this);
            setTransition(NULL);
        };

        void QueryActiveElementTransition()
        {
            setTransition("QueryActiveElementTransition");
            (getState()).QueryActiveElementTransition(*this);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryElementCountTransition()
        {
            setTransition("QueryElementCountTransition");
            (getState()).QueryElementCountTransition(*this);
            setTransition(NULL);
        };

        void QueryElementListTransition()
        {
            setTransition("QueryElementListTransition");
            (getState()).QueryElementListTransition(*this);
            setTransition(NULL);
        };

        void QueryElementTransition()
        {
            setTransition("QueryElementTransition");
            (getState()).QueryElementTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryGlobalWaypointTransition()
        {
            setTransition("QueryGlobalWaypointTransition");
            (getState()).QueryGlobalWaypointTransition(*this);
            setTransition(NULL);
        };

        void QueryStatusTransition()
        {
            setTransition("QueryStatusTransition");
            (getState()).QueryStatusTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void QueryTravelSpeedTransition()
        {
            setTransition("QueryTravelSpeedTransition");
            (getState()).QueryTravelSpeedTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void ResetTransition()
        {
            setTransition("ResetTransition");
            (getState()).ResetTransition(*this);
            setTransition(NULL);
        };

        void ResumeTransition()
        {
            setTransition("ResumeTransition");
            (getState()).ResumeTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetElementTransition()
        {
            setTransition("SetElementTransition");
            (getState()).SetElementTransition(*this);
            setTransition(NULL);
        };

        void SetEmergencyTransition()
        {
            setTransition("SetEmergencyTransition");
            (getState()).SetEmergencyTransition(*this);
            setTransition(NULL);
        };

        void ShutdownTransition()
        {
            setTransition("ShutdownTransition");
            (getState()).ShutdownTransition(*this);
            setTransition(NULL);
        };

        void StandbyTransition()
        {
            setTransition("StandbyTransition");
            (getState()).StandbyTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        GlobalWaypointListDriver_SendFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_GLOBALWAYPOINTLISTDRIVER_SENDFSM_SM
