#ifndef _H_LOCALWAYPOINTLISTDRIVER_RECEIVEFSM_SM
#define _H_LOCALWAYPOINTLISTDRIVER_RECEIVEFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : LocalWaypointListDriver_ReceiveFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_LocalWaypointListDriver_1_0
{
    // Forward declarations.
    class LocalWaypointListDriver_ReceiveFSM_SM;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready;
    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency;
    class LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class LocalWaypointListDriver_ReceiveFSM_SM_Default;
    class LocalWaypointListDriver_ReceiveFSMState;
    class LocalWaypointListDriver_ReceiveFSMContext;
    class LocalWaypointListDriver_ReceiveFSM;

    class LocalWaypointListDriver_ReceiveFSMState :
        public statemap::State
    {
    public:

        LocalWaypointListDriver_ReceiveFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(LocalWaypointListDriver_ReceiveFSMContext&) {};
        virtual void Exit(LocalWaypointListDriver_ReceiveFSMContext&) {};

        virtual void BroadcastGlobalTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void BroadcastLocalTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void CancelEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ClearEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void CreateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void DeleteElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void EventErrorTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void EventOccurredTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ExecuteListTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void InitializedTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void QueryActiveElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryElementCountTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryElementListTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryEventsTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryLocalWaypointTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryStatusTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryTimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void QueryTravelSpeedTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, ExecuteList msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData);
        virtual void ReleaseControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void RequestControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ResetTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ResumeTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void SendTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void SetAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void SetElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void SetEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void TimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        virtual void UpdateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);

    protected:

        virtual void Default(LocalWaypointListDriver_ReceiveFSMContext& context);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM
    {
    public:

        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby Receiving_Ready_NotControlled_StateA_Standby;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init Receiving_Ready_NotControlled_StateA_Init;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure Receiving_Ready_NotControlled_StateA_Failure;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown Receiving_Ready_NotControlled_StateA_Shutdown;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency Receiving_Ready_NotControlled_StateA_Emergency;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby Receiving_Ready_Controlled_StateB_Standby;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready Receiving_Ready_Controlled_StateB_Ready;
        static LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency Receiving_Ready_Controlled_StateB_Emergency;
        static LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Default :
        public LocalWaypointListDriver_ReceiveFSMState
    {
    public:

        LocalWaypointListDriver_ReceiveFSM_SM_Default(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSMState(name, stateId)
        {};

    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Standby(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Init(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Failure(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Shutdown(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_NotControlled_StateA_Emergency(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Standby(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Ready(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, ExecuteList msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Receiving_Ready_Controlled_StateB_Emergency(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryActiveElement msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context, SetElement msg, Receive::Body::ReceiveRec transportData);
    };

    class LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public LocalWaypointListDriver_ReceiveFSM_SM_Default
    {
    public:
        LocalWaypointListDriver_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : LocalWaypointListDriver_ReceiveFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void BroadcastLocalTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void CancelEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ClearEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void CreateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void DeleteElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void EventErrorTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void EventOccurredTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ExecuteListTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void FailureTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void InitializedTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryActiveElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryElementCountTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryElementListTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryEventsTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryLocalWaypointTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryStatusTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryTimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void QueryTravelSpeedTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ReceiveTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ReleaseControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void RequestControlTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ResetTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ResumeTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void SendTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void SetAuthorityTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void SetElementTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void SetEmergencyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void ShutdownTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void StandbyTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void TimeoutTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
        void UpdateEventTransition(LocalWaypointListDriver_ReceiveFSMContext& context);
    };

    class LocalWaypointListDriver_ReceiveFSMContext :
        public statemap::FSMContext
    {
    public:

        LocalWaypointListDriver_ReceiveFSMContext(LocalWaypointListDriver_ReceiveFSM& owner)
        : FSMContext(LocalWaypointListDriver_ReceiveFSM_SM::Receiving_Ready_NotControlled_StateA_Init),
          _owner(owner)
        {};

        LocalWaypointListDriver_ReceiveFSMContext(LocalWaypointListDriver_ReceiveFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        LocalWaypointListDriver_ReceiveFSM& getOwner() const
        {
            return (_owner);
        };

        LocalWaypointListDriver_ReceiveFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<LocalWaypointListDriver_ReceiveFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void ClearEmergencyTransition()
        {
            setTransition("ClearEmergencyTransition");
            (getState()).ClearEmergencyTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void DeleteElementTransition()
        {
            setTransition("DeleteElementTransition");
            (getState()).DeleteElementTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void ExecuteListTransition()
        {
            setTransition("ExecuteListTransition");
            (getState()).ExecuteListTransition(*this);
            setTransition(NULL);
        };

        void FailureTransition()
        {
            setTransition("FailureTransition");
            (getState()).FailureTransition(*this);
            setTransition(NULL);
        };

        void InitializedTransition()
        {
            setTransition("InitializedTransition");
            (getState()).InitializedTransition(*this);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_ReceivingTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_ReadyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_ControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateBTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_EmergencyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_ReadyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_Controlled_StateB_StandbyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateATransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_EmergencyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_FailureTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_InitTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_ShutdownTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition");
            (getState()).InternalStateChange_To_LocalWaypointListDriver_ReceiveFSM_Receiving_Ready_NotControlled_StateA_StandbyTransition(*this, ie);
            setTransition(NULL);
        };

        void QueryActiveElementTransition()
        {
            setTransition("QueryActiveElementTransition");
            (getState()).QueryActiveElementTransition(*this);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryElementCountTransition()
        {
            setTransition("QueryElementCountTransition");
            (getState()).QueryElementCountTransition(*this);
            setTransition(NULL);
        };

        void QueryElementListTransition()
        {
            setTransition("QueryElementListTransition");
            (getState()).QueryElementListTransition(*this);
            setTransition(NULL);
        };

        void QueryElementTransition()
        {
            setTransition("QueryElementTransition");
            (getState()).QueryElementTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryLocalWaypointTransition()
        {
            setTransition("QueryLocalWaypointTransition");
            (getState()).QueryLocalWaypointTransition(*this);
            setTransition(NULL);
        };

        void QueryStatusTransition()
        {
            setTransition("QueryStatusTransition");
            (getState()).QueryStatusTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void QueryTravelSpeedTransition()
        {
            setTransition("QueryTravelSpeedTransition");
            (getState()).QueryTravelSpeedTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition(ExecuteList msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryActiveElement msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryLocalWaypoint msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryTravelSpeed msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(SetElement msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void ResetTransition()
        {
            setTransition("ResetTransition");
            (getState()).ResetTransition(*this);
            setTransition(NULL);
        };

        void ResumeTransition()
        {
            setTransition("ResumeTransition");
            (getState()).ResumeTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetElementTransition()
        {
            setTransition("SetElementTransition");
            (getState()).SetElementTransition(*this);
            setTransition(NULL);
        };

        void SetEmergencyTransition()
        {
            setTransition("SetEmergencyTransition");
            (getState()).SetEmergencyTransition(*this);
            setTransition(NULL);
        };

        void ShutdownTransition()
        {
            setTransition("ShutdownTransition");
            (getState()).ShutdownTransition(*this);
            setTransition(NULL);
        };

        void StandbyTransition()
        {
            setTransition("StandbyTransition");
            (getState()).StandbyTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        LocalWaypointListDriver_ReceiveFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_LOCALWAYPOINTLISTDRIVER_RECEIVEFSM_SM
