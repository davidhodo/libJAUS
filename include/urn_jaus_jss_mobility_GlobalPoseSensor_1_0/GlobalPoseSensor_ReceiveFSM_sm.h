#ifndef _H_GLOBALPOSESENSOR_RECEIVEFSM_SM
#define _H_GLOBALPOSESENSOR_RECEIVEFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : GlobalPoseSensor_ReceiveFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_mobility_GlobalPoseSensor_1_0
{
    // Forward declarations.
    class GlobalPoseSensor_ReceiveFSM_SM;
    class GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled;
    class GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_Controlled;
    class GlobalPoseSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class GlobalPoseSensor_ReceiveFSM_SM_Default;
    class GlobalPoseSensor_ReceiveFSMState;
    class GlobalPoseSensor_ReceiveFSMContext;
    class GlobalPoseSensor_ReceiveFSM;

    class GlobalPoseSensor_ReceiveFSMState :
        public statemap::State
    {
    public:

        GlobalPoseSensor_ReceiveFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(GlobalPoseSensor_ReceiveFSMContext&) {};
        virtual void Exit(GlobalPoseSensor_ReceiveFSMContext&) {};

        virtual void BroadcastGlobalTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void BroadcastLocalTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void CancelEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void CreateEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void EventErrorTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void EventOccurredTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_ReceivingTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_ReadyTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        virtual void QueryAuthorityTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void QueryControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void QueryEventsTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void QueryGeomagneticPropertyTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void QueryGlobalPoseTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void QueryTimeoutTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGeomagneticProperty msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGlobalPose msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, SetGeomagneticProperty msg, Receive::Body::ReceiveRec transportData);
        virtual void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, SetGlobalPose msg, Receive::Body::ReceiveRec transportData);
        virtual void ReleaseControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void RequestControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void SendTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void SetAuthorityTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void SetGeomagneticPropertyTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void SetGlobalPoseTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void TimeoutTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        virtual void UpdateEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);

    protected:

        virtual void Default(GlobalPoseSensor_ReceiveFSMContext& context);
    };

    class GlobalPoseSensor_ReceiveFSM_SM
    {
    public:

        static GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled Receiving_Ready_NotControlled;
        static GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_Controlled Receiving_Ready_Controlled;
        static GlobalPoseSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class GlobalPoseSensor_ReceiveFSM_SM_Default :
        public GlobalPoseSensor_ReceiveFSMState
    {
    public:

        GlobalPoseSensor_ReceiveFSM_SM_Default(const char *name, int stateId)
        : GlobalPoseSensor_ReceiveFSMState(name, stateId)
        {};

    };

    class GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled :
        public GlobalPoseSensor_ReceiveFSM_SM_Default
    {
    public:
        GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_NotControlled(const char *name, int stateId)
        : GlobalPoseSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGeomagneticProperty msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGlobalPose msg, Receive::Body::ReceiveRec transportData);
    };

    class GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_Controlled :
        public GlobalPoseSensor_ReceiveFSM_SM_Default
    {
    public:
        GlobalPoseSensor_ReceiveFSM_SM_Receiving_Ready_Controlled(const char *name, int stateId)
        : GlobalPoseSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_ReceivingTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_ReadyTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(GlobalPoseSensor_ReceiveFSMContext& context, JTS::InternalEvent* ie);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGeomagneticProperty msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, QueryGlobalPose msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, SetGeomagneticProperty msg, Receive::Body::ReceiveRec transportData);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context, SetGlobalPose msg, Receive::Body::ReceiveRec transportData);
    };

    class GlobalPoseSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public GlobalPoseSensor_ReceiveFSM_SM_Default
    {
    public:
        GlobalPoseSensor_ReceiveFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : GlobalPoseSensor_ReceiveFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void BroadcastLocalTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void CancelEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void CreateEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void EventErrorTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void EventOccurredTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryAuthorityTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryEventsTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryGeomagneticPropertyTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryGlobalPoseTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void QueryTimeoutTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void ReceiveTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void ReleaseControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void RequestControlTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void SendTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void SetAuthorityTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void SetGeomagneticPropertyTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void SetGlobalPoseTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void TimeoutTransition(GlobalPoseSensor_ReceiveFSMContext& context);
        void UpdateEventTransition(GlobalPoseSensor_ReceiveFSMContext& context);
    };

    class GlobalPoseSensor_ReceiveFSMContext :
        public statemap::FSMContext
    {
    public:

        GlobalPoseSensor_ReceiveFSMContext(GlobalPoseSensor_ReceiveFSM& owner)
        : FSMContext(GlobalPoseSensor_ReceiveFSM_SM::Receiving_Ready_NotControlled),
          _owner(owner)
        {};

        GlobalPoseSensor_ReceiveFSMContext(GlobalPoseSensor_ReceiveFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        GlobalPoseSensor_ReceiveFSM& getOwner() const
        {
            return (_owner);
        };

        GlobalPoseSensor_ReceiveFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<GlobalPoseSensor_ReceiveFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_ReceivingTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_ReceivingTransition");
            (getState()).InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_ReceivingTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_ReadyTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_ReadyTransition");
            (getState()).InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_ReadyTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_ControlledTransition");
            (getState()).InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_ControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(JTS::InternalEvent* ie)
        {
            setTransition("InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition");
            (getState()).InternalStateChange_To_GlobalPoseSensor_ReceiveFSM_Receiving_Ready_NotControlledTransition(*this, ie);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryGeomagneticPropertyTransition()
        {
            setTransition("QueryGeomagneticPropertyTransition");
            (getState()).QueryGeomagneticPropertyTransition(*this);
            setTransition(NULL);
        };

        void QueryGlobalPoseTransition()
        {
            setTransition("QueryGlobalPoseTransition");
            (getState()).QueryGlobalPoseTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryGeomagneticProperty msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(QueryGlobalPose msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(SetGeomagneticProperty msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReceiveTransition(SetGlobalPose msg, Receive::Body::ReceiveRec transportData)
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this, msg, transportData);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetGeomagneticPropertyTransition()
        {
            setTransition("SetGeomagneticPropertyTransition");
            (getState()).SetGeomagneticPropertyTransition(*this);
            setTransition(NULL);
        };

        void SetGlobalPoseTransition()
        {
            setTransition("SetGlobalPoseTransition");
            (getState()).SetGlobalPoseTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        GlobalPoseSensor_ReceiveFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_GLOBALPOSESENSOR_RECEIVEFSM_SM
