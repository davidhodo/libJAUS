#ifndef _H_MANAGEMENT_SENDFSM_SM
#define _H_MANAGEMENT_SENDFSM_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Management_SendFSM_sm.sm
 */


#define SMC_USES_IOSTREAMS

#include <statemap.h>

namespace urn_jaus_jss_core_Management_1_0
{
    // Forward declarations.
    class Management_SendFSM_SM;
    class Management_SendFSM_SM_Sending;
    class Management_SendFSM_SM_Internally_Generated_State_DO_NOT_USE;
    class Management_SendFSM_SM_Default;
    class Management_SendFSMState;
    class Management_SendFSMContext;
    class Management_SendFSM;

    class Management_SendFSMState :
        public statemap::State
    {
    public:

        Management_SendFSMState(const char *name, int stateId)
        : statemap::State(name, stateId)
        {};

        virtual void Entry(Management_SendFSMContext&) {};
        virtual void Exit(Management_SendFSMContext&) {};

        virtual void BroadcastGlobalTransition(Management_SendFSMContext& context);
        virtual void BroadcastLocalTransition(Management_SendFSMContext& context);
        virtual void CancelEventTransition(Management_SendFSMContext& context);
        virtual void ClearEmergencyTransition(Management_SendFSMContext& context);
        virtual void CreateEventTransition(Management_SendFSMContext& context);
        virtual void EventErrorTransition(Management_SendFSMContext& context);
        virtual void EventOccurredTransition(Management_SendFSMContext& context);
        virtual void FailureTransition(Management_SendFSMContext& context);
        virtual void InitializedTransition(Management_SendFSMContext& context);
        virtual void QueryAuthorityTransition(Management_SendFSMContext& context);
        virtual void QueryControlTransition(Management_SendFSMContext& context);
        virtual void QueryEventsTransition(Management_SendFSMContext& context);
        virtual void QueryStatusTransition(Management_SendFSMContext& context);
        virtual void QueryTimeoutTransition(Management_SendFSMContext& context);
        virtual void ReceiveTransition(Management_SendFSMContext& context);
        virtual void ReleaseControlTransition(Management_SendFSMContext& context);
        virtual void RequestControlTransition(Management_SendFSMContext& context);
        virtual void ResetTransition(Management_SendFSMContext& context);
        virtual void ResumeTransition(Management_SendFSMContext& context);
        virtual void SendTransition(Management_SendFSMContext& context);
        virtual void SetAuthorityTransition(Management_SendFSMContext& context);
        virtual void SetEmergencyTransition(Management_SendFSMContext& context);
        virtual void ShutdownTransition(Management_SendFSMContext& context);
        virtual void StandbyTransition(Management_SendFSMContext& context);
        virtual void TimeoutTransition(Management_SendFSMContext& context);
        virtual void UpdateEventTransition(Management_SendFSMContext& context);

    protected:

        virtual void Default(Management_SendFSMContext& context);
    };

    class Management_SendFSM_SM
    {
    public:

        static Management_SendFSM_SM_Sending Sending;
        static Management_SendFSM_SM_Internally_Generated_State_DO_NOT_USE Internally_Generated_State_DO_NOT_USE;
    };

    class Management_SendFSM_SM_Default :
        public Management_SendFSMState
    {
    public:

        Management_SendFSM_SM_Default(const char *name, int stateId)
        : Management_SendFSMState(name, stateId)
        {};

    };

    class Management_SendFSM_SM_Sending :
        public Management_SendFSM_SM_Default
    {
    public:
        Management_SendFSM_SM_Sending(const char *name, int stateId)
        : Management_SendFSM_SM_Default(name, stateId)
        {};

    };

    class Management_SendFSM_SM_Internally_Generated_State_DO_NOT_USE :
        public Management_SendFSM_SM_Default
    {
    public:
        Management_SendFSM_SM_Internally_Generated_State_DO_NOT_USE(const char *name, int stateId)
        : Management_SendFSM_SM_Default(name, stateId)
        {};

        void BroadcastGlobalTransition(Management_SendFSMContext& context);
        void BroadcastLocalTransition(Management_SendFSMContext& context);
        void CancelEventTransition(Management_SendFSMContext& context);
        void ClearEmergencyTransition(Management_SendFSMContext& context);
        void CreateEventTransition(Management_SendFSMContext& context);
        void EventErrorTransition(Management_SendFSMContext& context);
        void EventOccurredTransition(Management_SendFSMContext& context);
        void FailureTransition(Management_SendFSMContext& context);
        void InitializedTransition(Management_SendFSMContext& context);
        void QueryAuthorityTransition(Management_SendFSMContext& context);
        void QueryControlTransition(Management_SendFSMContext& context);
        void QueryEventsTransition(Management_SendFSMContext& context);
        void QueryStatusTransition(Management_SendFSMContext& context);
        void QueryTimeoutTransition(Management_SendFSMContext& context);
        void ReceiveTransition(Management_SendFSMContext& context);
        void ReleaseControlTransition(Management_SendFSMContext& context);
        void RequestControlTransition(Management_SendFSMContext& context);
        void ResetTransition(Management_SendFSMContext& context);
        void ResumeTransition(Management_SendFSMContext& context);
        void SendTransition(Management_SendFSMContext& context);
        void SetAuthorityTransition(Management_SendFSMContext& context);
        void SetEmergencyTransition(Management_SendFSMContext& context);
        void ShutdownTransition(Management_SendFSMContext& context);
        void StandbyTransition(Management_SendFSMContext& context);
        void TimeoutTransition(Management_SendFSMContext& context);
        void UpdateEventTransition(Management_SendFSMContext& context);
    };

    class Management_SendFSMContext :
        public statemap::FSMContext
    {
    public:

        Management_SendFSMContext(Management_SendFSM& owner)
        : FSMContext(Management_SendFSM_SM::Sending),
          _owner(owner)
        {};

        Management_SendFSMContext(Management_SendFSM& owner, const statemap::State& state)
        : FSMContext(state),
          _owner(owner)
        {};

        virtual void enterStartState()
        {
            getState().Entry(*this);
            return;
        }

        Management_SendFSM& getOwner() const
        {
            return (_owner);
        };

        Management_SendFSMState& getState() const
        {
            if (_state == NULL)
            {
                throw statemap::StateUndefinedException();
            }

            return (dynamic_cast<Management_SendFSMState&>(*_state));
        };

        void BroadcastGlobalTransition()
        {
            setTransition("BroadcastGlobalTransition");
            (getState()).BroadcastGlobalTransition(*this);
            setTransition(NULL);
        };

        void BroadcastLocalTransition()
        {
            setTransition("BroadcastLocalTransition");
            (getState()).BroadcastLocalTransition(*this);
            setTransition(NULL);
        };

        void CancelEventTransition()
        {
            setTransition("CancelEventTransition");
            (getState()).CancelEventTransition(*this);
            setTransition(NULL);
        };

        void ClearEmergencyTransition()
        {
            setTransition("ClearEmergencyTransition");
            (getState()).ClearEmergencyTransition(*this);
            setTransition(NULL);
        };

        void CreateEventTransition()
        {
            setTransition("CreateEventTransition");
            (getState()).CreateEventTransition(*this);
            setTransition(NULL);
        };

        void EventErrorTransition()
        {
            setTransition("EventErrorTransition");
            (getState()).EventErrorTransition(*this);
            setTransition(NULL);
        };

        void EventOccurredTransition()
        {
            setTransition("EventOccurredTransition");
            (getState()).EventOccurredTransition(*this);
            setTransition(NULL);
        };

        void FailureTransition()
        {
            setTransition("FailureTransition");
            (getState()).FailureTransition(*this);
            setTransition(NULL);
        };

        void InitializedTransition()
        {
            setTransition("InitializedTransition");
            (getState()).InitializedTransition(*this);
            setTransition(NULL);
        };

        void QueryAuthorityTransition()
        {
            setTransition("QueryAuthorityTransition");
            (getState()).QueryAuthorityTransition(*this);
            setTransition(NULL);
        };

        void QueryControlTransition()
        {
            setTransition("QueryControlTransition");
            (getState()).QueryControlTransition(*this);
            setTransition(NULL);
        };

        void QueryEventsTransition()
        {
            setTransition("QueryEventsTransition");
            (getState()).QueryEventsTransition(*this);
            setTransition(NULL);
        };

        void QueryStatusTransition()
        {
            setTransition("QueryStatusTransition");
            (getState()).QueryStatusTransition(*this);
            setTransition(NULL);
        };

        void QueryTimeoutTransition()
        {
            setTransition("QueryTimeoutTransition");
            (getState()).QueryTimeoutTransition(*this);
            setTransition(NULL);
        };

        void ReceiveTransition()
        {
            setTransition("ReceiveTransition");
            (getState()).ReceiveTransition(*this);
            setTransition(NULL);
        };

        void ReleaseControlTransition()
        {
            setTransition("ReleaseControlTransition");
            (getState()).ReleaseControlTransition(*this);
            setTransition(NULL);
        };

        void RequestControlTransition()
        {
            setTransition("RequestControlTransition");
            (getState()).RequestControlTransition(*this);
            setTransition(NULL);
        };

        void ResetTransition()
        {
            setTransition("ResetTransition");
            (getState()).ResetTransition(*this);
            setTransition(NULL);
        };

        void ResumeTransition()
        {
            setTransition("ResumeTransition");
            (getState()).ResumeTransition(*this);
            setTransition(NULL);
        };

        void SendTransition()
        {
            setTransition("SendTransition");
            (getState()).SendTransition(*this);
            setTransition(NULL);
        };

        void SetAuthorityTransition()
        {
            setTransition("SetAuthorityTransition");
            (getState()).SetAuthorityTransition(*this);
            setTransition(NULL);
        };

        void SetEmergencyTransition()
        {
            setTransition("SetEmergencyTransition");
            (getState()).SetEmergencyTransition(*this);
            setTransition(NULL);
        };

        void ShutdownTransition()
        {
            setTransition("ShutdownTransition");
            (getState()).ShutdownTransition(*this);
            setTransition(NULL);
        };

        void StandbyTransition()
        {
            setTransition("StandbyTransition");
            (getState()).StandbyTransition(*this);
            setTransition(NULL);
        };

        void TimeoutTransition()
        {
            setTransition("TimeoutTransition");
            (getState()).TimeoutTransition(*this);
            setTransition(NULL);
        };

        void UpdateEventTransition()
        {
            setTransition("UpdateEventTransition");
            (getState()).UpdateEventTransition(*this);
            setTransition(NULL);
        };

    private:

        Management_SendFSM& _owner;
    };
}


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_MANAGEMENT_SENDFSM_SM
